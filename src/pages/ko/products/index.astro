---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ProductCard from '@/components/ProductCard.astro';
import { getCollection } from 'astro:content';

const allProducts = await getCollection('products', p => p.data.lang === 'ko');

// Extract unique filter options from all products (before filtering)
const uniqueCategories = [...new Set(allProducts.map(p => p.data.category))].filter(Boolean);
const categoryCounts = {};
allProducts.forEach(product => {
  const category = product.data.category;
  if (category) {
    categoryCounts[category] = (categoryCounts[category] || 0) + 1;
  }
});

const uniqueResolutions = [...new Set(allProducts.map(p => p.data.resolution).filter(Boolean))];
const resolutionCounts = {};
allProducts.forEach(product => {
  const resolution = product.data.resolution;
  if (resolution) {
    resolutionCounts[resolution] = (resolutionCounts[resolution] || 0) + 1;
  }
});

const uniqueSensorSizes = [...new Set(allProducts.map(p => p.data.sensor_size).filter(Boolean))];
const sensorSizeCounts = {};
allProducts.forEach(product => {
  const sensorSize = product.data.sensor_size;
  if (sensorSize) {
    sensorSizeCounts[sensorSize] = (sensorSizeCounts[sensorSize] || 0) + 1;
  }
});

const uniqueOutputs = [...new Set(allProducts.flatMap(p => p.data.output || []).filter(Boolean))];
const outputCounts = {};
allProducts.forEach(product => {
  if (product.data.output) {
    product.data.output.forEach(output => {
      outputCounts[output] = (outputCounts[output] || 0) + 1;
    });
  }
});

const url = new URL(Astro.request.url);
const selectedCategories = url.searchParams.get('category')?.split(',') || [];
const selectedResolutions = url.searchParams.get('resolution')?.split(',') || [];
const selectedSensorSizes = url.searchParams.get('sensor_size')?.split(',') || [];
const selectedOutputs = url.searchParams.get('output')?.split(',') || [];

let filteredProducts = allProducts;

// Apply category filter
if (selectedCategories.length > 0) {
  filteredProducts = filteredProducts.filter(product =>
    selectedCategories.includes(product.data.category)
  );
}

// Apply resolution filter
if (selectedResolutions.length > 0) {
  filteredProducts = filteredProducts.filter(product =>
    product.data.resolution && selectedResolutions.includes(product.data.resolution)
  );
}

// Apply sensor_size filter
if (selectedSensorSizes.length > 0) {
  filteredProducts = filteredProducts.filter(product =>
    product.data.sensor_size && selectedSensorSizes.includes(product.data.sensor_size)
  );
}

// Apply output filter
if (selectedOutputs.length > 0) {
  filteredProducts = filteredProducts.filter(product =>
    product.data.output && selectedOutputs.every(selectedOutput => product.data.output.includes(selectedOutput))
  );
}

const products = filteredProducts.sort((a,b) => (a.data.order ?? 999) - (b.data.order ?? 999));
---
<BaseLayout title="제품 목록" lang="ko">
  <h1 class="text-2xl font-bold mb-6">제품</h1>
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Filter Sidebar -->
    <aside class="md:w-1/4 bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-4">필터</h2>

      <div class="mb-6">
        <h3 class="text-lg font-medium mb-2">카테고리</h3>
        <div class="space-y-2">
          {uniqueCategories.map(category => (
            <label class="flex items-center">
              <input
                type="checkbox"
                name="category"
                value={category}
                class="form-checkbox h-4 w-4 text-blue-600"
                checked={selectedCategories.includes(category)}
              />
              <span class="ml-2 text-gray-700">{category} ({categoryCounts[category] || 0})</span>
            </label>
          ))}
        </div>
      </div>

      <div class="mb-6">
        <h3 class="text-lg font-medium mb-2">해상도</h3>
        <div class="space-y-2">
          {uniqueResolutions.map(resolution => (
            <label class="flex items-center">
              <input
                type="checkbox"
                name="resolution"
                value={resolution}
                class="form-checkbox h-4 w-4 text-blue-600"
                checked={selectedResolutions.includes(resolution)}
              />
              <span class="ml-2 text-gray-700">{resolution} ({resolutionCounts[resolution] || 0})</span>
            </label>
          ))}
        </div>
      </div>

      <div class="mb-6">
        <h3 class="text-lg font-medium mb-2">센서 크기</h3>
        <div class="space-y-2">
          {uniqueSensorSizes.map(sensorSize => (
            <label class="flex items-center">
              <input
                type="checkbox"
                name="sensor_size"
                value={sensorSize}
                class="form-checkbox h-4 w-4 text-blue-600"
                checked={selectedSensorSizes.includes(sensorSize)}
              />
              <span class="ml-2 text-gray-700">{sensorSize} ({sensorSizeCounts[sensorSize] || 0})</span>
            </label>
          ))}
        </div>
      </div>

      <div>
        <h3 class="text-lg font-medium mb-2">출력</h3>
        <div class="space-y-2">
          {uniqueOutputs.map(output => (
            <label class="flex items-center">
              <input
                type="checkbox"
                name="output"
                value={output}
                class="form-checkbox h-4 w-4 text-blue-600"
                checked={selectedOutputs.includes(output)}
              />
              <span class="ml-2 text-gray-700">{output} ({outputCounts[output] || 0})</span>
            </label>
          ))}
        </div>
      </div>
    </aside>

    <!-- Product List -->
    <div class="md:w-3/4 grid gap-6 sm:grid-cols-2 lg:grid-cols-3" id="product-list">
      {products.length === 0 ? (
        <p class="col-span-full text-center text-gray-600">선택한 필터에 해당하는 제품이 없습니다.</p>
      ) : (
        products.map(({ slug, data }) => (
          <ProductCard
            href={`/ko/products/${slug}`}
            name={data.name}
            mainDesc={data.mainDesc} // Changed from shortDesc
            img={data.heroImage}
            category={data.category}
            resolution={data.resolution}
            sensorSize={data.sensor_size}
          />
        ))
      )}
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('change', (event) => {
    const target = event.target as HTMLInputElement;
    if (target.matches('input[type="checkbox"][name="category"], input[type="checkbox"][name="resolution"], input[type="checkbox"][name="sensor_size"], input[type="checkbox"][name="output"]')) {
      const form = target.closest('aside');
      if (!form) return;

      const searchParams = new URLSearchParams(window.location.search);

      const updateParam = (name: string) => {
        const checkboxes = form.querySelectorAll(`input[type="checkbox"][name="${name}"]:checked`) as NodeListOf<HTMLInputElement>;
        const values = Array.from(checkboxes).map(cb => cb.value);
        if (values.length > 0) {
          searchParams.set(name, values.join(','));
        } else {
          searchParams.delete(name);
        }
      };

      updateParam('category');
      updateParam('resolution');
      updateParam('sensor_size');
      updateParam('output');

      window.location.search = searchParams.toString();
    }
  });
</script>
